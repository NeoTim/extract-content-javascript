= ExtractContentJS

== やれること

- 本文抽出
- タグおすすめ

== ファイル

基本的には以下をこの順に読み込めば動く:
[lib/lib.js] 共通するもの
[lib/extract-content.js] 本文抽出
[lib/scoring-words.js] タグのスコアリング

リポジトリのルートでmakeするとこれらを連結した extract-content-allinone.js が生成される.

実際の使い方を詳しく見たくなったら:
[sketch/extract-content.test.js] 本文抽出テスト
[sketch/suggest-tag.test.js] おすすめタグテスト

== 使い方

=== タグをおすすめするインタフェース

==== ExtractContentJS.suggestTags(url, title, body, tags)
- 文書文字列とタグを渡しておすすめしてもらう
- url, title, body: string
- tags[word:string] = weight
  - タグからその重み(document frequency)へのハッシュ
- 返り値: [ { word: w, score: s } ]
  - タグ, スコアを持つハッシュの配列
  - スコアの高い順にソート済み
  - スコアが0だったタグは除外されている

==== ExtractContentJS.suggestTagsForDocument(doc, tags)
- 文書のDOMオブジェクトとタグを渡しておすすめしてもらう
- docから本文抽出してからExtractContentJS.suggestTagsを呼ぶ

=== 本文抽出インタフェース

本文抽出だけしたい/ハンドラを指定したい場合に使う.

==== ExtractContentJS.LayeredExtractor
  var ex = new ExtractContentJS.LayeredExtractor();
  //ex.addHandler( ex.factory.getHandler('Description') );
  //ex.addHandler( ex.factory.getHandler('Scraper'));
  //ex.addHandler( ex.factory.getHandler('GoogleAdsence') );
  ex.addHandler( ex.factory.getHandler('Heuristics') );
  var res = ex.extract(document);

  if (res.isSuccess) {
      res.url;   // URL string
      res.title; // title string
      res.engine; // 抽出に用いたハンドラそのもの
      res.content; // コンテンツクラスのインスタンス(後述)
  }

ハンドラはいまのところHeuristicsのみ実装済み.

==== コンテンツクラス
  content.asLeaves(); // 本文だと判定された葉ノードを含む葉クラスインスタンス(後述)の配列を返す
  content.asNode(); // すべての葉ノードの共通の祖先のうち最深のものを返す
  content.asTextFragment(); // asLeaves()に含まれるノードのテキストを連結したものを返す
  content.toString(); // asNode()のtextContentを返す

==== 葉クラス
  leaf.node; // 葉ノード
  leaf.depth; // ノードのbodyからの深さ

=== タグのスコアリングのインタフェース

スコアリングの仕方を調整したいときに使う.

==== ExtractContentJS.RelativeWords
  function suggestTags(url, title, body, tags) {
      var sc = new ExtractContentJS.RelativeWords();
      sc.addEngine( sc.factory.getEngine('TfIdf') );
      sc.addEngine( sc.factory.getEngine('TitlePosition') );
      sc.addEngine( sc.factory.getEngine('ContentPosition') );
      return sc.top({ url: url, title: title, content: body }, tags);
  }
